
Task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001290  08001290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d8  080012d8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080012d8  080012d8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d8  080012d8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012dc  080012dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080012e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  08001340  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001340  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e24  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000591  00000000  00000000  00020ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00021488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000169  00000000  00000000  00021688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d5c  00000000  00000000  000217f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c9a  00000000  00000000  0002454d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009dac  00000000  00000000  000261e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d28  00000000  00000000  0002ff94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00030cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001278 	.word	0x08001278

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08001278 	.word	0x08001278

080001d8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d3f8      	bcc.n	80001e6 <delay+0xe>
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <led_init_all>:

void led_init_all(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <led_init_all+0x6c>)
 8000208:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800020a:	4b19      	ldr	r3, [pc, #100]	; (8000270 <led_init_all+0x70>)
 800020c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0208 	orr.w	r2, r3, #8
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800024a:	200c      	movs	r0, #12
 800024c:	f000 f82a 	bl	80002a4 <led_off>
    led_off(LED_ORANGE);
 8000250:	200d      	movs	r0, #13
 8000252:	f000 f827 	bl	80002a4 <led_off>
    led_off(LED_RED);
 8000256:	200e      	movs	r0, #14
 8000258:	f000 f824 	bl	80002a4 <led_off>
    led_off(LED_BLUE);
 800025c:	200f      	movs	r0, #15
 800025e:	f000 f821 	bl	80002a4 <led_off>



}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40023830 	.word	0x40023830
 8000270:	40020c00 	.word	0x40020c00

08000274 <led_on>:

void led_on(uint8_t led_no)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <led_on+0x2c>)
 8000280:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	431a      	orrs	r2, r3
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	601a      	str	r2, [r3, #0]

}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40020c14 	.word	0x40020c14

080002a4 <led_off>:

void led_off(uint8_t led_no)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <led_off+0x2c>)
 80002b0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	43d2      	mvns	r2, r2
 80002c0:	401a      	ands	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	601a      	str	r2, [r3, #0]

}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020c14 	.word	0x40020c14

080002d4 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002d8:	f000 f926 	bl	8000528 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002dc:	4807      	ldr	r0, [pc, #28]	; (80002fc <main+0x28>)
 80002de:	f000 f88f 	bl	8000400 <init_scheduler_stack>

	init_tasks_stack();
 80002e2:	f000 f893 	bl	800040c <init_tasks_stack>

	led_init_all();
 80002e6:	f7ff ff8b 	bl	8000200 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f000 f853 	bl	8000398 <init_systick_timer>

	switch_sp_to_psp();
 80002f2:	f000 f99f 	bl	8000634 <switch_sp_to_psp>

	task1_handler();
 80002f6:	f000 f807 	bl	8000308 <task1_handler>

while(1){
 80002fa:	e7fe      	b.n	80002fa <main+0x26>
 80002fc:	2001ec00 	.word	0x2001ec00

08000300 <idle_task>:

}


void idle_task(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	while(1);
 8000304:	e7fe      	b.n	8000304 <idle_task+0x4>
	...

08000308 <task1_handler>:
}


void task1_handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 800030c:	200c      	movs	r0, #12
 800030e:	f7ff ffb1 	bl	8000274 <led_on>
		delay(DELAY_COUNT_1S);
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <task1_handler+0x20>)
 8000314:	f7ff ff60 	bl	80001d8 <delay>
		led_off(LED_GREEN);
 8000318:	200c      	movs	r0, #12
 800031a:	f7ff ffc3 	bl	80002a4 <led_off>
		delay(DELAY_COUNT_1S);
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <task1_handler+0x20>)
 8000320:	f7ff ff5a 	bl	80001d8 <delay>
		led_on(LED_GREEN);
 8000324:	e7f2      	b.n	800030c <task1_handler+0x4>
 8000326:	bf00      	nop
 8000328:	001312d0 	.word	0x001312d0

0800032c <task2_handler>:
	}

}

void task2_handler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000330:	200d      	movs	r0, #13
 8000332:	f7ff ff9f 	bl	8000274 <led_on>
		delay(DELAY_COUNT_500MS);
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <task2_handler+0x20>)
 8000338:	f7ff ff4e 	bl	80001d8 <delay>
		led_off(LED_ORANGE);
 800033c:	200d      	movs	r0, #13
 800033e:	f7ff ffb1 	bl	80002a4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000342:	4802      	ldr	r0, [pc, #8]	; (800034c <task2_handler+0x20>)
 8000344:	f7ff ff48 	bl	80001d8 <delay>
		led_on(LED_ORANGE);
 8000348:	e7f2      	b.n	8000330 <task2_handler+0x4>
 800034a:	bf00      	nop
 800034c:	00098968 	.word	0x00098968

08000350 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000354:	200f      	movs	r0, #15
 8000356:	f7ff ff8d 	bl	8000274 <led_on>
		delay(DELAY_COUNT_250MS);
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <task3_handler+0x20>)
 800035c:	f7ff ff3c 	bl	80001d8 <delay>
		led_off(LED_BLUE);
 8000360:	200f      	movs	r0, #15
 8000362:	f7ff ff9f 	bl	80002a4 <led_off>
		delay(DELAY_COUNT_250MS);
 8000366:	4802      	ldr	r0, [pc, #8]	; (8000370 <task3_handler+0x20>)
 8000368:	f7ff ff36 	bl	80001d8 <delay>
		led_on(LED_BLUE);
 800036c:	e7f2      	b.n	8000354 <task3_handler+0x4>
 800036e:	bf00      	nop
 8000370:	0004c4b4 	.word	0x0004c4b4

08000374 <task4_handler>:

}

void task4_handler(void)

{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000378:	200e      	movs	r0, #14
 800037a:	f7ff ff7b 	bl	8000274 <led_on>
		delay(DELAY_COUNT_125MS);
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <task4_handler+0x20>)
 8000380:	f7ff ff2a 	bl	80001d8 <delay>
		led_off(LED_RED);
 8000384:	200e      	movs	r0, #14
 8000386:	f7ff ff8d 	bl	80002a4 <led_off>
		delay(DELAY_COUNT_125MS);
 800038a:	4802      	ldr	r0, [pc, #8]	; (8000394 <task4_handler+0x20>)
 800038c:	f7ff ff24 	bl	80001d8 <delay>
		led_on(LED_RED);
 8000390:	e7f2      	b.n	8000378 <task4_handler+0x4>
 8000392:	bf00      	nop
 8000394:	0002625a 	.word	0x0002625a

08000398 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 8000398:	b480      	push	{r7}
 800039a:	b087      	sub	sp, #28
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <init_systick_timer+0x5c>)
 80003a2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <init_systick_timer+0x60>)
 80003a6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003a8:	4a14      	ldr	r2, [pc, #80]	; (80003fc <init_systick_timer+0x64>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b0:	3b01      	subs	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0xFFFFFFFF);
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	431a      	orrs	r2, r3
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f043 0202 	orr.w	r2, r3, #2
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f043 0204 	orr.w	r2, r3, #4
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	601a      	str	r2, [r3, #0]

}
 80003ea:	bf00      	nop
 80003ec:	371c      	adds	r7, #28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	e000e014 	.word	0xe000e014
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	00f42400 	.word	0x00f42400

08000400 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000400:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 8000402:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 8000406:	4770      	bx	lr

}
 8000408:	bf00      	nop
	...

0800040c <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 8000412:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <init_tasks_stack+0xf0>)
 8000414:	2200      	movs	r2, #0
 8000416:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000418:	4b38      	ldr	r3, [pc, #224]	; (80004fc <init_tasks_stack+0xf0>)
 800041a:	2200      	movs	r2, #0
 800041c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800041e:	4b37      	ldr	r3, [pc, #220]	; (80004fc <init_tasks_stack+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000426:	4b35      	ldr	r3, [pc, #212]	; (80004fc <init_tasks_stack+0xf0>)
 8000428:	2200      	movs	r2, #0
 800042a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <init_tasks_stack+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000436:	4b31      	ldr	r3, [pc, #196]	; (80004fc <init_tasks_stack+0xf0>)
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <init_tasks_stack+0xf4>)
 800043a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <init_tasks_stack+0xf0>)
 800043e:	4a31      	ldr	r2, [pc, #196]	; (8000504 <init_tasks_stack+0xf8>)
 8000440:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <init_tasks_stack+0xf0>)
 8000444:	4a30      	ldr	r2, [pc, #192]	; (8000508 <init_tasks_stack+0xfc>)
 8000446:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000448:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <init_tasks_stack+0xf0>)
 800044a:	4a30      	ldr	r2, [pc, #192]	; (800050c <init_tasks_stack+0x100>)
 800044c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800044e:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <init_tasks_stack+0xf0>)
 8000450:	4a2f      	ldr	r2, [pc, #188]	; (8000510 <init_tasks_stack+0x104>)
 8000452:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <init_tasks_stack+0xf0>)
 8000456:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <init_tasks_stack+0x108>)
 8000458:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <init_tasks_stack+0xf0>)
 800045c:	4a2e      	ldr	r2, [pc, #184]	; (8000518 <init_tasks_stack+0x10c>)
 800045e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <init_tasks_stack+0xf0>)
 8000462:	4a2e      	ldr	r2, [pc, #184]	; (800051c <init_tasks_stack+0x110>)
 8000464:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <init_tasks_stack+0xf0>)
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <init_tasks_stack+0x114>)
 800046a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800046c:	4b23      	ldr	r3, [pc, #140]	; (80004fc <init_tasks_stack+0xf0>)
 800046e:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <init_tasks_stack+0x118>)
 8000470:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e037      	b.n	80004e8 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000478:	4a20      	ldr	r2, [pc, #128]	; (80004fc <init_tasks_stack+0xf0>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3b04      	subs	r3, #4
 8000488:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000490:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3b04      	subs	r3, #4
 8000496:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <init_tasks_stack+0xf0>)
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	330c      	adds	r3, #12
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	e008      	b.n	80004d0 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b0c      	cmp	r3, #12
 80004d4:	ddf3      	ble.n	80004be <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4908      	ldr	r1, [pc, #32]	; (80004fc <init_tasks_stack+0xf0>)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	440b      	add	r3, r1
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	ddc4      	ble.n	8000478 <init_tasks_stack+0x6c>


	}

}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000080 	.word	0x20000080
 8000500:	2001f000 	.word	0x2001f000
 8000504:	20020000 	.word	0x20020000
 8000508:	2001fc00 	.word	0x2001fc00
 800050c:	2001f800 	.word	0x2001f800
 8000510:	2001f400 	.word	0x2001f400
 8000514:	08000301 	.word	0x08000301
 8000518:	08000309 	.word	0x08000309
 800051c:	0800032d 	.word	0x0800032d
 8000520:	08000351 	.word	0x08000351
 8000524:	08000375 	.word	0x08000375

08000528 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <enable_processor_faults+0x38>)
 8000530:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	e000ed24 	.word	0xe000ed24

08000564 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <get_psp_value+0x18>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <get_psp_value+0x1c>)
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	4413      	add	r3, r2
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000000 	.word	0x20000000
 8000580:	20000080 	.word	0x20000080

08000584 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <save_psp_value+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <save_psp_value+0x24>)
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	4413      	add	r3, r2
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000080 	.word	0x20000080

080005ac <update_next_task>:


void update_next_task(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005b2:	23ff      	movs	r3, #255	; 0xff
 80005b4:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	e024      	b.n	8000606 <update_next_task+0x5a>
	{
		current_task++;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <update_next_task+0x7c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <update_next_task+0x7c>)
 80005c6:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <update_next_task+0x7c>)
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <update_next_task+0x80>)
 80005ce:	fba3 1302 	umull	r1, r3, r3, r2
 80005d2:	0899      	lsrs	r1, r3, #2
 80005d4:	460b      	mov	r3, r1
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <update_next_task+0x7c>)
 80005e0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <update_next_task+0x7c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <update_next_task+0x84>)
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	3308      	adds	r3, #8
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <update_next_task+0x54>
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <update_next_task+0x7c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d106      	bne.n	800060e <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b04      	cmp	r3, #4
 800060a:	ddd7      	ble.n	80005bc <update_next_task+0x10>
 800060c:	e000      	b.n	8000610 <update_next_task+0x64>
			break;
 800060e:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <update_next_task+0x70>
		current_task = 0;
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <update_next_task+0x7c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000
 800062c:	cccccccd 	.word	0xcccccccd
 8000630:	20000080 	.word	0x20000080

08000634 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000634:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000636:	f7ff ff95 	bl	8000564 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800063a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 800063e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000642:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000646:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800064a:	4770      	bx	lr
}
 800064c:	bf00      	nop

0800064e <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 800064e:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000652:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000656:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000658:	f7ff ff94 	bl	8000584 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 800065c:	f7ff ffa6 	bl	80005ac <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000660:	f7ff ff80 	bl	8000564 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000664:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000668:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800066c:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000670:	4770      	bx	lr



}
 8000672:	bf00      	nop

08000674 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <update_global_tick_count+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a03      	ldr	r2, [pc, #12]	; (800068c <update_global_tick_count+0x18>)
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000007c 	.word	0x2000007c

08000690 <unblock_tasks>:

void unblock_tasks(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 8000696:	2301      	movs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e01b      	b.n	80006d4 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <unblock_tasks+0x58>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	3308      	adds	r3, #8
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <unblock_tasks+0x58>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4413      	add	r3, r2
 80006b4:	3304      	adds	r3, #4
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <unblock_tasks+0x5c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d106      	bne.n	80006ce <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	dde0      	ble.n	800069c <unblock_tasks+0xc>
			}
		}

	}

}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000080 	.word	0x20000080
 80006ec:	2000007c 	.word	0x2000007c

080006f0 <SysTick_Handler>:
int a;
void  SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
//	a++;
//	printf("test 1hz = %d\n",a);

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <SysTick_Handler+0x28>)
 80006f8:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 80006fa:	f7ff ffbb 	bl	8000674 <update_global_tick_count>

    unblock_tasks();
 80006fe:	f7ff ffc7 	bl	8000690 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <HardFault_Handler+0xc>)
 8000722:	f000 fa19 	bl	8000b58 <puts>
	while(1);
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0xa>
 8000728:	08001290 	.word	0x08001290

0800072c <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <MemManage_Handler+0xc>)
 8000732:	f000 fa11 	bl	8000b58 <puts>
	while(1);
 8000736:	e7fe      	b.n	8000736 <MemManage_Handler+0xa>
 8000738:	080012a8 	.word	0x080012a8

0800073c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000740:	4801      	ldr	r0, [pc, #4]	; (8000748 <BusFault_Handler+0xc>)
 8000742:	f000 fa09 	bl	8000b58 <puts>
	while(1);
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0xa>
 8000748:	080012c0 	.word	0x080012c0

0800074c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <ITM_SendChar+0x44>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <ITM_SendChar+0x44>)
 800075c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000760:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <ITM_SendChar+0x48>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <ITM_SendChar+0x48>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800076e:	bf00      	nop
 8000770:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800077e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	6013      	str	r3, [r2, #0]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000edfc 	.word	0xe000edfc
 8000794:	e0000e00 	.word	0xe0000e00

08000798 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	e00a      	b.n	80007c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007aa:	f3af 8000 	nop.w
 80007ae:	4601      	mov	r1, r0
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	60ba      	str	r2, [r7, #8]
 80007b6:	b2ca      	uxtb	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf0      	blt.n	80007aa <_read+0x12>
  }

  return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e009      	b.n	80007f8 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffad 	bl	800074c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3301      	adds	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dbf1      	blt.n	80007e4 <_write+0x12>
  }
  return len;
 8000800:	687b      	ldr	r3, [r7, #4]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_close>:

int _close(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000816:	4618      	mov	r0, r3
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000830:	605a      	str	r2, [r3, #4]
  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <_isatty>:

int _isatty(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f000 fa8a 	bl	8000db4 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20020000 	.word	0x20020000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200000d0 	.word	0x200000d0
 80008d4:	20000220 	.word	0x20000220

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f000 fa5b 	bl	8000dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fce3 	bl	80002d4 <main>

0800090e <LoopForever>:

LoopForever:
  b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800091c:	080012e0 	.word	0x080012e0
  ldr r2, =_sbss
 8000920:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000924:	20000220 	.word	0x20000220

08000928 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <std>:
 800092c:	2300      	movs	r3, #0
 800092e:	b510      	push	{r4, lr}
 8000930:	4604      	mov	r4, r0
 8000932:	e9c0 3300 	strd	r3, r3, [r0]
 8000936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800093a:	6083      	str	r3, [r0, #8]
 800093c:	8181      	strh	r1, [r0, #12]
 800093e:	6643      	str	r3, [r0, #100]	; 0x64
 8000940:	81c2      	strh	r2, [r0, #14]
 8000942:	6183      	str	r3, [r0, #24]
 8000944:	4619      	mov	r1, r3
 8000946:	2208      	movs	r2, #8
 8000948:	305c      	adds	r0, #92	; 0x5c
 800094a:	f000 f9e5 	bl	8000d18 <memset>
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <std+0x58>)
 8000950:	6263      	str	r3, [r4, #36]	; 0x24
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <std+0x5c>)
 8000954:	62a3      	str	r3, [r4, #40]	; 0x28
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <std+0x60>)
 8000958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <std+0x64>)
 800095c:	6323      	str	r3, [r4, #48]	; 0x30
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <std+0x68>)
 8000960:	6224      	str	r4, [r4, #32]
 8000962:	429c      	cmp	r4, r3
 8000964:	d006      	beq.n	8000974 <std+0x48>
 8000966:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800096a:	4294      	cmp	r4, r2
 800096c:	d002      	beq.n	8000974 <std+0x48>
 800096e:	33d0      	adds	r3, #208	; 0xd0
 8000970:	429c      	cmp	r4, r3
 8000972:	d105      	bne.n	8000980 <std+0x54>
 8000974:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800097c:	f000 ba44 	b.w	8000e08 <__retarget_lock_init_recursive>
 8000980:	bd10      	pop	{r4, pc}
 8000982:	bf00      	nop
 8000984:	08000b69 	.word	0x08000b69
 8000988:	08000b8b 	.word	0x08000b8b
 800098c:	08000bc3 	.word	0x08000bc3
 8000990:	08000be7 	.word	0x08000be7
 8000994:	200000d4 	.word	0x200000d4

08000998 <stdio_exit_handler>:
 8000998:	4a02      	ldr	r2, [pc, #8]	; (80009a4 <stdio_exit_handler+0xc>)
 800099a:	4903      	ldr	r1, [pc, #12]	; (80009a8 <stdio_exit_handler+0x10>)
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <stdio_exit_handler+0x14>)
 800099e:	f000 b869 	b.w	8000a74 <_fwalk_sglue>
 80009a2:	bf00      	nop
 80009a4:	20000004 	.word	0x20000004
 80009a8:	08001101 	.word	0x08001101
 80009ac:	20000010 	.word	0x20000010

080009b0 <cleanup_stdio>:
 80009b0:	6841      	ldr	r1, [r0, #4]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <cleanup_stdio+0x34>)
 80009b4:	4299      	cmp	r1, r3
 80009b6:	b510      	push	{r4, lr}
 80009b8:	4604      	mov	r4, r0
 80009ba:	d001      	beq.n	80009c0 <cleanup_stdio+0x10>
 80009bc:	f000 fba0 	bl	8001100 <_fflush_r>
 80009c0:	68a1      	ldr	r1, [r4, #8]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <cleanup_stdio+0x38>)
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d002      	beq.n	80009ce <cleanup_stdio+0x1e>
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 fb99 	bl	8001100 <_fflush_r>
 80009ce:	68e1      	ldr	r1, [r4, #12]
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <cleanup_stdio+0x3c>)
 80009d2:	4299      	cmp	r1, r3
 80009d4:	d004      	beq.n	80009e0 <cleanup_stdio+0x30>
 80009d6:	4620      	mov	r0, r4
 80009d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009dc:	f000 bb90 	b.w	8001100 <_fflush_r>
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	bf00      	nop
 80009e4:	200000d4 	.word	0x200000d4
 80009e8:	2000013c 	.word	0x2000013c
 80009ec:	200001a4 	.word	0x200001a4

080009f0 <global_stdio_init.part.0>:
 80009f0:	b510      	push	{r4, lr}
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <global_stdio_init.part.0+0x30>)
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <global_stdio_init.part.0+0x34>)
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <global_stdio_init.part.0+0x38>)
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	4620      	mov	r0, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	2104      	movs	r1, #4
 8000a00:	f7ff ff94 	bl	800092c <std>
 8000a04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2109      	movs	r1, #9
 8000a0c:	f7ff ff8e 	bl	800092c <std>
 8000a10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a14:	2202      	movs	r2, #2
 8000a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a1a:	2112      	movs	r1, #18
 8000a1c:	f7ff bf86 	b.w	800092c <std>
 8000a20:	2000020c 	.word	0x2000020c
 8000a24:	200000d4 	.word	0x200000d4
 8000a28:	08000999 	.word	0x08000999

08000a2c <__sfp_lock_acquire>:
 8000a2c:	4801      	ldr	r0, [pc, #4]	; (8000a34 <__sfp_lock_acquire+0x8>)
 8000a2e:	f000 b9ec 	b.w	8000e0a <__retarget_lock_acquire_recursive>
 8000a32:	bf00      	nop
 8000a34:	20000215 	.word	0x20000215

08000a38 <__sfp_lock_release>:
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <__sfp_lock_release+0x8>)
 8000a3a:	f000 b9e7 	b.w	8000e0c <__retarget_lock_release_recursive>
 8000a3e:	bf00      	nop
 8000a40:	20000215 	.word	0x20000215

08000a44 <__sinit>:
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
 8000a48:	f7ff fff0 	bl	8000a2c <__sfp_lock_acquire>
 8000a4c:	6a23      	ldr	r3, [r4, #32]
 8000a4e:	b11b      	cbz	r3, 8000a58 <__sinit+0x14>
 8000a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a54:	f7ff bff0 	b.w	8000a38 <__sfp_lock_release>
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__sinit+0x28>)
 8000a5a:	6223      	str	r3, [r4, #32]
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__sinit+0x2c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1f5      	bne.n	8000a50 <__sinit+0xc>
 8000a64:	f7ff ffc4 	bl	80009f0 <global_stdio_init.part.0>
 8000a68:	e7f2      	b.n	8000a50 <__sinit+0xc>
 8000a6a:	bf00      	nop
 8000a6c:	080009b1 	.word	0x080009b1
 8000a70:	2000020c 	.word	0x2000020c

08000a74 <_fwalk_sglue>:
 8000a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a78:	4607      	mov	r7, r0
 8000a7a:	4688      	mov	r8, r1
 8000a7c:	4614      	mov	r4, r2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a84:	f1b9 0901 	subs.w	r9, r9, #1
 8000a88:	d505      	bpl.n	8000a96 <_fwalk_sglue+0x22>
 8000a8a:	6824      	ldr	r4, [r4, #0]
 8000a8c:	2c00      	cmp	r4, #0
 8000a8e:	d1f7      	bne.n	8000a80 <_fwalk_sglue+0xc>
 8000a90:	4630      	mov	r0, r6
 8000a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a96:	89ab      	ldrh	r3, [r5, #12]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d907      	bls.n	8000aac <_fwalk_sglue+0x38>
 8000a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	d003      	beq.n	8000aac <_fwalk_sglue+0x38>
 8000aa4:	4629      	mov	r1, r5
 8000aa6:	4638      	mov	r0, r7
 8000aa8:	47c0      	blx	r8
 8000aaa:	4306      	orrs	r6, r0
 8000aac:	3568      	adds	r5, #104	; 0x68
 8000aae:	e7e9      	b.n	8000a84 <_fwalk_sglue+0x10>

08000ab0 <_puts_r>:
 8000ab0:	6a03      	ldr	r3, [r0, #32]
 8000ab2:	b570      	push	{r4, r5, r6, lr}
 8000ab4:	6884      	ldr	r4, [r0, #8]
 8000ab6:	4605      	mov	r5, r0
 8000ab8:	460e      	mov	r6, r1
 8000aba:	b90b      	cbnz	r3, 8000ac0 <_puts_r+0x10>
 8000abc:	f7ff ffc2 	bl	8000a44 <__sinit>
 8000ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ac2:	07db      	lsls	r3, r3, #31
 8000ac4:	d405      	bmi.n	8000ad2 <_puts_r+0x22>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	0598      	lsls	r0, r3, #22
 8000aca:	d402      	bmi.n	8000ad2 <_puts_r+0x22>
 8000acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ace:	f000 f99c 	bl	8000e0a <__retarget_lock_acquire_recursive>
 8000ad2:	89a3      	ldrh	r3, [r4, #12]
 8000ad4:	0719      	lsls	r1, r3, #28
 8000ad6:	d513      	bpl.n	8000b00 <_puts_r+0x50>
 8000ad8:	6923      	ldr	r3, [r4, #16]
 8000ada:	b18b      	cbz	r3, 8000b00 <_puts_r+0x50>
 8000adc:	3e01      	subs	r6, #1
 8000ade:	68a3      	ldr	r3, [r4, #8]
 8000ae0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	60a3      	str	r3, [r4, #8]
 8000ae8:	b9e9      	cbnz	r1, 8000b26 <_puts_r+0x76>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da2e      	bge.n	8000b4c <_puts_r+0x9c>
 8000aee:	4622      	mov	r2, r4
 8000af0:	210a      	movs	r1, #10
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 f87b 	bl	8000bee <__swbuf_r>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d007      	beq.n	8000b0c <_puts_r+0x5c>
 8000afc:	250a      	movs	r5, #10
 8000afe:	e007      	b.n	8000b10 <_puts_r+0x60>
 8000b00:	4621      	mov	r1, r4
 8000b02:	4628      	mov	r0, r5
 8000b04:	f000 f8b0 	bl	8000c68 <__swsetup_r>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d0e7      	beq.n	8000adc <_puts_r+0x2c>
 8000b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b12:	07da      	lsls	r2, r3, #31
 8000b14:	d405      	bmi.n	8000b22 <_puts_r+0x72>
 8000b16:	89a3      	ldrh	r3, [r4, #12]
 8000b18:	059b      	lsls	r3, r3, #22
 8000b1a:	d402      	bmi.n	8000b22 <_puts_r+0x72>
 8000b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1e:	f000 f975 	bl	8000e0c <__retarget_lock_release_recursive>
 8000b22:	4628      	mov	r0, r5
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	da04      	bge.n	8000b34 <_puts_r+0x84>
 8000b2a:	69a2      	ldr	r2, [r4, #24]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dc06      	bgt.n	8000b3e <_puts_r+0x8e>
 8000b30:	290a      	cmp	r1, #10
 8000b32:	d004      	beq.n	8000b3e <_puts_r+0x8e>
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	6022      	str	r2, [r4, #0]
 8000b3a:	7019      	strb	r1, [r3, #0]
 8000b3c:	e7cf      	b.n	8000ade <_puts_r+0x2e>
 8000b3e:	4622      	mov	r2, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 f854 	bl	8000bee <__swbuf_r>
 8000b46:	3001      	adds	r0, #1
 8000b48:	d1c9      	bne.n	8000ade <_puts_r+0x2e>
 8000b4a:	e7df      	b.n	8000b0c <_puts_r+0x5c>
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	250a      	movs	r5, #10
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	6022      	str	r2, [r4, #0]
 8000b54:	701d      	strb	r5, [r3, #0]
 8000b56:	e7db      	b.n	8000b10 <_puts_r+0x60>

08000b58 <puts>:
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <puts+0xc>)
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	f7ff bfa7 	b.w	8000ab0 <_puts_r>
 8000b62:	bf00      	nop
 8000b64:	2000005c 	.word	0x2000005c

08000b68 <__sread>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b70:	f000 f8fc 	bl	8000d6c <_read_r>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	bfab      	itete	ge
 8000b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8000b7c:	181b      	addge	r3, r3, r0
 8000b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000b82:	bfac      	ite	ge
 8000b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8000b86:	81a3      	strhlt	r3, [r4, #12]
 8000b88:	bd10      	pop	{r4, pc}

08000b8a <__swrite>:
 8000b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b8e:	461f      	mov	r7, r3
 8000b90:	898b      	ldrh	r3, [r1, #12]
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	4605      	mov	r5, r0
 8000b96:	460c      	mov	r4, r1
 8000b98:	4616      	mov	r6, r2
 8000b9a:	d505      	bpl.n	8000ba8 <__swrite+0x1e>
 8000b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f000 f8d0 	bl	8000d48 <_lseek_r>
 8000ba8:	89a3      	ldrh	r3, [r4, #12]
 8000baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	4632      	mov	r2, r6
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4628      	mov	r0, r5
 8000bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbe:	f000 b8e7 	b.w	8000d90 <_write_r>

08000bc2 <__sseek>:
 8000bc2:	b510      	push	{r4, lr}
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bca:	f000 f8bd 	bl	8000d48 <_lseek_r>
 8000bce:	1c43      	adds	r3, r0, #1
 8000bd0:	89a3      	ldrh	r3, [r4, #12]
 8000bd2:	bf15      	itete	ne
 8000bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000bde:	81a3      	strheq	r3, [r4, #12]
 8000be0:	bf18      	it	ne
 8000be2:	81a3      	strhne	r3, [r4, #12]
 8000be4:	bd10      	pop	{r4, pc}

08000be6 <__sclose>:
 8000be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bea:	f000 b89d 	b.w	8000d28 <_close_r>

08000bee <__swbuf_r>:
 8000bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf0:	460e      	mov	r6, r1
 8000bf2:	4614      	mov	r4, r2
 8000bf4:	4605      	mov	r5, r0
 8000bf6:	b118      	cbz	r0, 8000c00 <__swbuf_r+0x12>
 8000bf8:	6a03      	ldr	r3, [r0, #32]
 8000bfa:	b90b      	cbnz	r3, 8000c00 <__swbuf_r+0x12>
 8000bfc:	f7ff ff22 	bl	8000a44 <__sinit>
 8000c00:	69a3      	ldr	r3, [r4, #24]
 8000c02:	60a3      	str	r3, [r4, #8]
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	071a      	lsls	r2, r3, #28
 8000c08:	d525      	bpl.n	8000c56 <__swbuf_r+0x68>
 8000c0a:	6923      	ldr	r3, [r4, #16]
 8000c0c:	b31b      	cbz	r3, 8000c56 <__swbuf_r+0x68>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	6922      	ldr	r2, [r4, #16]
 8000c12:	1a98      	subs	r0, r3, r2
 8000c14:	6963      	ldr	r3, [r4, #20]
 8000c16:	b2f6      	uxtb	r6, r6
 8000c18:	4283      	cmp	r3, r0
 8000c1a:	4637      	mov	r7, r6
 8000c1c:	dc04      	bgt.n	8000c28 <__swbuf_r+0x3a>
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4628      	mov	r0, r5
 8000c22:	f000 fa6d 	bl	8001100 <_fflush_r>
 8000c26:	b9e0      	cbnz	r0, 8000c62 <__swbuf_r+0x74>
 8000c28:	68a3      	ldr	r3, [r4, #8]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60a3      	str	r3, [r4, #8]
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	6022      	str	r2, [r4, #0]
 8000c34:	701e      	strb	r6, [r3, #0]
 8000c36:	6962      	ldr	r2, [r4, #20]
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__swbuf_r+0x5a>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	07db      	lsls	r3, r3, #31
 8000c42:	d506      	bpl.n	8000c52 <__swbuf_r+0x64>
 8000c44:	2e0a      	cmp	r6, #10
 8000c46:	d104      	bne.n	8000c52 <__swbuf_r+0x64>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f000 fa58 	bl	8001100 <_fflush_r>
 8000c50:	b938      	cbnz	r0, 8000c62 <__swbuf_r+0x74>
 8000c52:	4638      	mov	r0, r7
 8000c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c56:	4621      	mov	r1, r4
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f000 f805 	bl	8000c68 <__swsetup_r>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d0d5      	beq.n	8000c0e <__swbuf_r+0x20>
 8000c62:	f04f 37ff 	mov.w	r7, #4294967295
 8000c66:	e7f4      	b.n	8000c52 <__swbuf_r+0x64>

08000c68 <__swsetup_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <__swsetup_r+0xac>)
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	460c      	mov	r4, r1
 8000c72:	b118      	cbz	r0, 8000c7c <__swsetup_r+0x14>
 8000c74:	6a03      	ldr	r3, [r0, #32]
 8000c76:	b90b      	cbnz	r3, 8000c7c <__swsetup_r+0x14>
 8000c78:	f7ff fee4 	bl	8000a44 <__sinit>
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c82:	0718      	lsls	r0, r3, #28
 8000c84:	d422      	bmi.n	8000ccc <__swsetup_r+0x64>
 8000c86:	06d9      	lsls	r1, r3, #27
 8000c88:	d407      	bmi.n	8000c9a <__swsetup_r+0x32>
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	602b      	str	r3, [r5, #0]
 8000c8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c92:	81a3      	strh	r3, [r4, #12]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	e034      	b.n	8000d04 <__swsetup_r+0x9c>
 8000c9a:	0758      	lsls	r0, r3, #29
 8000c9c:	d512      	bpl.n	8000cc4 <__swsetup_r+0x5c>
 8000c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ca0:	b141      	cbz	r1, 8000cb4 <__swsetup_r+0x4c>
 8000ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	d002      	beq.n	8000cb0 <__swsetup_r+0x48>
 8000caa:	4628      	mov	r0, r5
 8000cac:	f000 f8b0 	bl	8000e10 <_free_r>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	6363      	str	r3, [r4, #52]	; 0x34
 8000cb4:	89a3      	ldrh	r3, [r4, #12]
 8000cb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cba:	81a3      	strh	r3, [r4, #12]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	6063      	str	r3, [r4, #4]
 8000cc0:	6923      	ldr	r3, [r4, #16]
 8000cc2:	6023      	str	r3, [r4, #0]
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	81a3      	strh	r3, [r4, #12]
 8000ccc:	6923      	ldr	r3, [r4, #16]
 8000cce:	b94b      	cbnz	r3, 8000ce4 <__swsetup_r+0x7c>
 8000cd0:	89a3      	ldrh	r3, [r4, #12]
 8000cd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cda:	d003      	beq.n	8000ce4 <__swsetup_r+0x7c>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f000 fa5c 	bl	800119c <__smakebuf_r>
 8000ce4:	89a0      	ldrh	r0, [r4, #12]
 8000ce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cea:	f010 0301 	ands.w	r3, r0, #1
 8000cee:	d00a      	beq.n	8000d06 <__swsetup_r+0x9e>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60a3      	str	r3, [r4, #8]
 8000cf4:	6963      	ldr	r3, [r4, #20]
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	61a3      	str	r3, [r4, #24]
 8000cfa:	6923      	ldr	r3, [r4, #16]
 8000cfc:	b943      	cbnz	r3, 8000d10 <__swsetup_r+0xa8>
 8000cfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d02:	d1c4      	bne.n	8000c8e <__swsetup_r+0x26>
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	0781      	lsls	r1, r0, #30
 8000d08:	bf58      	it	pl
 8000d0a:	6963      	ldrpl	r3, [r4, #20]
 8000d0c:	60a3      	str	r3, [r4, #8]
 8000d0e:	e7f4      	b.n	8000cfa <__swsetup_r+0x92>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7f7      	b.n	8000d04 <__swsetup_r+0x9c>
 8000d14:	2000005c 	.word	0x2000005c

08000d18 <memset>:
 8000d18:	4402      	add	r2, r0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <memset+0xa>
 8000d20:	4770      	bx	lr
 8000d22:	f803 1b01 	strb.w	r1, [r3], #1
 8000d26:	e7f9      	b.n	8000d1c <memset+0x4>

08000d28 <_close_r>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	4d06      	ldr	r5, [pc, #24]	; (8000d44 <_close_r+0x1c>)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	602b      	str	r3, [r5, #0]
 8000d34:	f7ff fd69 	bl	800080a <_close>
 8000d38:	1c43      	adds	r3, r0, #1
 8000d3a:	d102      	bne.n	8000d42 <_close_r+0x1a>
 8000d3c:	682b      	ldr	r3, [r5, #0]
 8000d3e:	b103      	cbz	r3, 8000d42 <_close_r+0x1a>
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	20000210 	.word	0x20000210

08000d48 <_lseek_r>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	4d07      	ldr	r5, [pc, #28]	; (8000d68 <_lseek_r+0x20>)
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	4611      	mov	r1, r2
 8000d52:	2200      	movs	r2, #0
 8000d54:	602a      	str	r2, [r5, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	f7ff fd7b 	bl	8000852 <_lseek>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_lseek_r+0x1e>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_lseek_r+0x1e>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	20000210 	.word	0x20000210

08000d6c <_read_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	; (8000d8c <_read_r+0x20>)
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fd0c 	bl	8000798 <_read>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_read_r+0x1e>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_read_r+0x1e>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	20000210 	.word	0x20000210

08000d90 <_write_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d07      	ldr	r5, [pc, #28]	; (8000db0 <_write_r+0x20>)
 8000d94:	4604      	mov	r4, r0
 8000d96:	4608      	mov	r0, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	602a      	str	r2, [r5, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f7ff fd17 	bl	80007d2 <_write>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_write_r+0x1e>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_write_r+0x1e>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000210 	.word	0x20000210

08000db4 <__errno>:
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <__errno+0x8>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000005c 	.word	0x2000005c

08000dc0 <__libc_init_array>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4d0d      	ldr	r5, [pc, #52]	; (8000df8 <__libc_init_array+0x38>)
 8000dc4:	4c0d      	ldr	r4, [pc, #52]	; (8000dfc <__libc_init_array+0x3c>)
 8000dc6:	1b64      	subs	r4, r4, r5
 8000dc8:	10a4      	asrs	r4, r4, #2
 8000dca:	2600      	movs	r6, #0
 8000dcc:	42a6      	cmp	r6, r4
 8000dce:	d109      	bne.n	8000de4 <__libc_init_array+0x24>
 8000dd0:	4d0b      	ldr	r5, [pc, #44]	; (8000e00 <__libc_init_array+0x40>)
 8000dd2:	4c0c      	ldr	r4, [pc, #48]	; (8000e04 <__libc_init_array+0x44>)
 8000dd4:	f000 fa50 	bl	8001278 <_init>
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	10a4      	asrs	r4, r4, #2
 8000ddc:	2600      	movs	r6, #0
 8000dde:	42a6      	cmp	r6, r4
 8000de0:	d105      	bne.n	8000dee <__libc_init_array+0x2e>
 8000de2:	bd70      	pop	{r4, r5, r6, pc}
 8000de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de8:	4798      	blx	r3
 8000dea:	3601      	adds	r6, #1
 8000dec:	e7ee      	b.n	8000dcc <__libc_init_array+0xc>
 8000dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df2:	4798      	blx	r3
 8000df4:	3601      	adds	r6, #1
 8000df6:	e7f2      	b.n	8000dde <__libc_init_array+0x1e>
 8000df8:	080012d8 	.word	0x080012d8
 8000dfc:	080012d8 	.word	0x080012d8
 8000e00:	080012d8 	.word	0x080012d8
 8000e04:	080012dc 	.word	0x080012dc

08000e08 <__retarget_lock_init_recursive>:
 8000e08:	4770      	bx	lr

08000e0a <__retarget_lock_acquire_recursive>:
 8000e0a:	4770      	bx	lr

08000e0c <__retarget_lock_release_recursive>:
 8000e0c:	4770      	bx	lr
	...

08000e10 <_free_r>:
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4605      	mov	r5, r0
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d041      	beq.n	8000e9c <_free_r+0x8c>
 8000e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e1c:	1f0c      	subs	r4, r1, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bfb8      	it	lt
 8000e22:	18e4      	addlt	r4, r4, r3
 8000e24:	f000 f8de 	bl	8000fe4 <__malloc_lock>
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <_free_r+0x90>)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	b933      	cbnz	r3, 8000e3c <_free_r+0x2c>
 8000e2e:	6063      	str	r3, [r4, #4]
 8000e30:	6014      	str	r4, [r2, #0]
 8000e32:	4628      	mov	r0, r5
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e38:	f000 b8da 	b.w	8000ff0 <__malloc_unlock>
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <_free_r+0x42>
 8000e40:	6820      	ldr	r0, [r4, #0]
 8000e42:	1821      	adds	r1, r4, r0
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf01      	itttt	eq
 8000e48:	6819      	ldreq	r1, [r3, #0]
 8000e4a:	685b      	ldreq	r3, [r3, #4]
 8000e4c:	1809      	addeq	r1, r1, r0
 8000e4e:	6021      	streq	r1, [r4, #0]
 8000e50:	e7ed      	b.n	8000e2e <_free_r+0x1e>
 8000e52:	461a      	mov	r2, r3
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	b10b      	cbz	r3, 8000e5c <_free_r+0x4c>
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d9fa      	bls.n	8000e52 <_free_r+0x42>
 8000e5c:	6811      	ldr	r1, [r2, #0]
 8000e5e:	1850      	adds	r0, r2, r1
 8000e60:	42a0      	cmp	r0, r4
 8000e62:	d10b      	bne.n	8000e7c <_free_r+0x6c>
 8000e64:	6820      	ldr	r0, [r4, #0]
 8000e66:	4401      	add	r1, r0
 8000e68:	1850      	adds	r0, r2, r1
 8000e6a:	4283      	cmp	r3, r0
 8000e6c:	6011      	str	r1, [r2, #0]
 8000e6e:	d1e0      	bne.n	8000e32 <_free_r+0x22>
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	6053      	str	r3, [r2, #4]
 8000e76:	4408      	add	r0, r1
 8000e78:	6010      	str	r0, [r2, #0]
 8000e7a:	e7da      	b.n	8000e32 <_free_r+0x22>
 8000e7c:	d902      	bls.n	8000e84 <_free_r+0x74>
 8000e7e:	230c      	movs	r3, #12
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	e7d6      	b.n	8000e32 <_free_r+0x22>
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	1821      	adds	r1, r4, r0
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	bf04      	itt	eq
 8000e8c:	6819      	ldreq	r1, [r3, #0]
 8000e8e:	685b      	ldreq	r3, [r3, #4]
 8000e90:	6063      	str	r3, [r4, #4]
 8000e92:	bf04      	itt	eq
 8000e94:	1809      	addeq	r1, r1, r0
 8000e96:	6021      	streq	r1, [r4, #0]
 8000e98:	6054      	str	r4, [r2, #4]
 8000e9a:	e7ca      	b.n	8000e32 <_free_r+0x22>
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000218 	.word	0x20000218

08000ea4 <sbrk_aligned>:
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	4e0e      	ldr	r6, [pc, #56]	; (8000ee0 <sbrk_aligned+0x3c>)
 8000ea8:	460c      	mov	r4, r1
 8000eaa:	6831      	ldr	r1, [r6, #0]
 8000eac:	4605      	mov	r5, r0
 8000eae:	b911      	cbnz	r1, 8000eb6 <sbrk_aligned+0x12>
 8000eb0:	f000 f9d2 	bl	8001258 <_sbrk_r>
 8000eb4:	6030      	str	r0, [r6, #0]
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f000 f9cd 	bl	8001258 <_sbrk_r>
 8000ebe:	1c43      	adds	r3, r0, #1
 8000ec0:	d00a      	beq.n	8000ed8 <sbrk_aligned+0x34>
 8000ec2:	1cc4      	adds	r4, r0, #3
 8000ec4:	f024 0403 	bic.w	r4, r4, #3
 8000ec8:	42a0      	cmp	r0, r4
 8000eca:	d007      	beq.n	8000edc <sbrk_aligned+0x38>
 8000ecc:	1a21      	subs	r1, r4, r0
 8000ece:	4628      	mov	r0, r5
 8000ed0:	f000 f9c2 	bl	8001258 <_sbrk_r>
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	d101      	bne.n	8000edc <sbrk_aligned+0x38>
 8000ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8000edc:	4620      	mov	r0, r4
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	2000021c 	.word	0x2000021c

08000ee4 <_malloc_r>:
 8000ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee8:	1ccd      	adds	r5, r1, #3
 8000eea:	f025 0503 	bic.w	r5, r5, #3
 8000eee:	3508      	adds	r5, #8
 8000ef0:	2d0c      	cmp	r5, #12
 8000ef2:	bf38      	it	cc
 8000ef4:	250c      	movcc	r5, #12
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	4607      	mov	r7, r0
 8000efa:	db01      	blt.n	8000f00 <_malloc_r+0x1c>
 8000efc:	42a9      	cmp	r1, r5
 8000efe:	d905      	bls.n	8000f0c <_malloc_r+0x28>
 8000f00:	230c      	movs	r3, #12
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	2600      	movs	r6, #0
 8000f06:	4630      	mov	r0, r6
 8000f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000fe0 <_malloc_r+0xfc>
 8000f10:	f000 f868 	bl	8000fe4 <__malloc_lock>
 8000f14:	f8d8 3000 	ldr.w	r3, [r8]
 8000f18:	461c      	mov	r4, r3
 8000f1a:	bb5c      	cbnz	r4, 8000f74 <_malloc_r+0x90>
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f7ff ffc0 	bl	8000ea4 <sbrk_aligned>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	4604      	mov	r4, r0
 8000f28:	d155      	bne.n	8000fd6 <_malloc_r+0xf2>
 8000f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f2e:	4626      	mov	r6, r4
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	d145      	bne.n	8000fc0 <_malloc_r+0xdc>
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d048      	beq.n	8000fca <_malloc_r+0xe6>
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	eb04 0903 	add.w	r9, r4, r3
 8000f42:	f000 f989 	bl	8001258 <_sbrk_r>
 8000f46:	4581      	cmp	r9, r0
 8000f48:	d13f      	bne.n	8000fca <_malloc_r+0xe6>
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	1a6d      	subs	r5, r5, r1
 8000f4e:	4629      	mov	r1, r5
 8000f50:	4638      	mov	r0, r7
 8000f52:	f7ff ffa7 	bl	8000ea4 <sbrk_aligned>
 8000f56:	3001      	adds	r0, #1
 8000f58:	d037      	beq.n	8000fca <_malloc_r+0xe6>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	442b      	add	r3, r5
 8000f5e:	6023      	str	r3, [r4, #0]
 8000f60:	f8d8 3000 	ldr.w	r3, [r8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d038      	beq.n	8000fda <_malloc_r+0xf6>
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	42a2      	cmp	r2, r4
 8000f6c:	d12b      	bne.n	8000fc6 <_malloc_r+0xe2>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	e00f      	b.n	8000f94 <_malloc_r+0xb0>
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	1b52      	subs	r2, r2, r5
 8000f78:	d41f      	bmi.n	8000fba <_malloc_r+0xd6>
 8000f7a:	2a0b      	cmp	r2, #11
 8000f7c:	d917      	bls.n	8000fae <_malloc_r+0xca>
 8000f7e:	1961      	adds	r1, r4, r5
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	6025      	str	r5, [r4, #0]
 8000f84:	bf18      	it	ne
 8000f86:	6059      	strne	r1, [r3, #4]
 8000f88:	6863      	ldr	r3, [r4, #4]
 8000f8a:	bf08      	it	eq
 8000f8c:	f8c8 1000 	streq.w	r1, [r8]
 8000f90:	5162      	str	r2, [r4, r5]
 8000f92:	604b      	str	r3, [r1, #4]
 8000f94:	4638      	mov	r0, r7
 8000f96:	f104 060b 	add.w	r6, r4, #11
 8000f9a:	f000 f829 	bl	8000ff0 <__malloc_unlock>
 8000f9e:	f026 0607 	bic.w	r6, r6, #7
 8000fa2:	1d23      	adds	r3, r4, #4
 8000fa4:	1af2      	subs	r2, r6, r3
 8000fa6:	d0ae      	beq.n	8000f06 <_malloc_r+0x22>
 8000fa8:	1b9b      	subs	r3, r3, r6
 8000faa:	50a3      	str	r3, [r4, r2]
 8000fac:	e7ab      	b.n	8000f06 <_malloc_r+0x22>
 8000fae:	42a3      	cmp	r3, r4
 8000fb0:	6862      	ldr	r2, [r4, #4]
 8000fb2:	d1dd      	bne.n	8000f70 <_malloc_r+0x8c>
 8000fb4:	f8c8 2000 	str.w	r2, [r8]
 8000fb8:	e7ec      	b.n	8000f94 <_malloc_r+0xb0>
 8000fba:	4623      	mov	r3, r4
 8000fbc:	6864      	ldr	r4, [r4, #4]
 8000fbe:	e7ac      	b.n	8000f1a <_malloc_r+0x36>
 8000fc0:	4634      	mov	r4, r6
 8000fc2:	6876      	ldr	r6, [r6, #4]
 8000fc4:	e7b4      	b.n	8000f30 <_malloc_r+0x4c>
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	e7cc      	b.n	8000f64 <_malloc_r+0x80>
 8000fca:	230c      	movs	r3, #12
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4638      	mov	r0, r7
 8000fd0:	f000 f80e 	bl	8000ff0 <__malloc_unlock>
 8000fd4:	e797      	b.n	8000f06 <_malloc_r+0x22>
 8000fd6:	6025      	str	r5, [r4, #0]
 8000fd8:	e7dc      	b.n	8000f94 <_malloc_r+0xb0>
 8000fda:	605b      	str	r3, [r3, #4]
 8000fdc:	deff      	udf	#255	; 0xff
 8000fde:	bf00      	nop
 8000fe0:	20000218 	.word	0x20000218

08000fe4 <__malloc_lock>:
 8000fe4:	4801      	ldr	r0, [pc, #4]	; (8000fec <__malloc_lock+0x8>)
 8000fe6:	f7ff bf10 	b.w	8000e0a <__retarget_lock_acquire_recursive>
 8000fea:	bf00      	nop
 8000fec:	20000214 	.word	0x20000214

08000ff0 <__malloc_unlock>:
 8000ff0:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <__malloc_unlock+0x8>)
 8000ff2:	f7ff bf0b 	b.w	8000e0c <__retarget_lock_release_recursive>
 8000ff6:	bf00      	nop
 8000ff8:	20000214 	.word	0x20000214

08000ffc <__sflush_r>:
 8000ffc:	898a      	ldrh	r2, [r1, #12]
 8000ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001000:	4605      	mov	r5, r0
 8001002:	0710      	lsls	r0, r2, #28
 8001004:	460c      	mov	r4, r1
 8001006:	d457      	bmi.n	80010b8 <__sflush_r+0xbc>
 8001008:	684b      	ldr	r3, [r1, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc04      	bgt.n	8001018 <__sflush_r+0x1c>
 800100e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	dc01      	bgt.n	8001018 <__sflush_r+0x1c>
 8001014:	2000      	movs	r0, #0
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800101a:	2e00      	cmp	r6, #0
 800101c:	d0fa      	beq.n	8001014 <__sflush_r+0x18>
 800101e:	2300      	movs	r3, #0
 8001020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001024:	682f      	ldr	r7, [r5, #0]
 8001026:	6a21      	ldr	r1, [r4, #32]
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	d032      	beq.n	8001092 <__sflush_r+0x96>
 800102c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800102e:	89a3      	ldrh	r3, [r4, #12]
 8001030:	075a      	lsls	r2, r3, #29
 8001032:	d505      	bpl.n	8001040 <__sflush_r+0x44>
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	1ac0      	subs	r0, r0, r3
 8001038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800103a:	b10b      	cbz	r3, 8001040 <__sflush_r+0x44>
 800103c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800103e:	1ac0      	subs	r0, r0, r3
 8001040:	2300      	movs	r3, #0
 8001042:	4602      	mov	r2, r0
 8001044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001046:	6a21      	ldr	r1, [r4, #32]
 8001048:	4628      	mov	r0, r5
 800104a:	47b0      	blx	r6
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	89a3      	ldrh	r3, [r4, #12]
 8001050:	d106      	bne.n	8001060 <__sflush_r+0x64>
 8001052:	6829      	ldr	r1, [r5, #0]
 8001054:	291d      	cmp	r1, #29
 8001056:	d82b      	bhi.n	80010b0 <__sflush_r+0xb4>
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <__sflush_r+0x100>)
 800105a:	410a      	asrs	r2, r1
 800105c:	07d6      	lsls	r6, r2, #31
 800105e:	d427      	bmi.n	80010b0 <__sflush_r+0xb4>
 8001060:	2200      	movs	r2, #0
 8001062:	6062      	str	r2, [r4, #4]
 8001064:	04d9      	lsls	r1, r3, #19
 8001066:	6922      	ldr	r2, [r4, #16]
 8001068:	6022      	str	r2, [r4, #0]
 800106a:	d504      	bpl.n	8001076 <__sflush_r+0x7a>
 800106c:	1c42      	adds	r2, r0, #1
 800106e:	d101      	bne.n	8001074 <__sflush_r+0x78>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b903      	cbnz	r3, 8001076 <__sflush_r+0x7a>
 8001074:	6560      	str	r0, [r4, #84]	; 0x54
 8001076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001078:	602f      	str	r7, [r5, #0]
 800107a:	2900      	cmp	r1, #0
 800107c:	d0ca      	beq.n	8001014 <__sflush_r+0x18>
 800107e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001082:	4299      	cmp	r1, r3
 8001084:	d002      	beq.n	800108c <__sflush_r+0x90>
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff fec2 	bl	8000e10 <_free_r>
 800108c:	2000      	movs	r0, #0
 800108e:	6360      	str	r0, [r4, #52]	; 0x34
 8001090:	e7c1      	b.n	8001016 <__sflush_r+0x1a>
 8001092:	2301      	movs	r3, #1
 8001094:	4628      	mov	r0, r5
 8001096:	47b0      	blx	r6
 8001098:	1c41      	adds	r1, r0, #1
 800109a:	d1c8      	bne.n	800102e <__sflush_r+0x32>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0c5      	beq.n	800102e <__sflush_r+0x32>
 80010a2:	2b1d      	cmp	r3, #29
 80010a4:	d001      	beq.n	80010aa <__sflush_r+0xae>
 80010a6:	2b16      	cmp	r3, #22
 80010a8:	d101      	bne.n	80010ae <__sflush_r+0xb2>
 80010aa:	602f      	str	r7, [r5, #0]
 80010ac:	e7b2      	b.n	8001014 <__sflush_r+0x18>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	81a3      	strh	r3, [r4, #12]
 80010b6:	e7ae      	b.n	8001016 <__sflush_r+0x1a>
 80010b8:	690f      	ldr	r7, [r1, #16]
 80010ba:	2f00      	cmp	r7, #0
 80010bc:	d0aa      	beq.n	8001014 <__sflush_r+0x18>
 80010be:	0793      	lsls	r3, r2, #30
 80010c0:	680e      	ldr	r6, [r1, #0]
 80010c2:	bf08      	it	eq
 80010c4:	694b      	ldreq	r3, [r1, #20]
 80010c6:	600f      	str	r7, [r1, #0]
 80010c8:	bf18      	it	ne
 80010ca:	2300      	movne	r3, #0
 80010cc:	1bf6      	subs	r6, r6, r7
 80010ce:	608b      	str	r3, [r1, #8]
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	dd9f      	ble.n	8001014 <__sflush_r+0x18>
 80010d4:	6a21      	ldr	r1, [r4, #32]
 80010d6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80010da:	4633      	mov	r3, r6
 80010dc:	463a      	mov	r2, r7
 80010de:	4628      	mov	r0, r5
 80010e0:	47e0      	blx	ip
 80010e2:	2800      	cmp	r0, #0
 80010e4:	dc06      	bgt.n	80010f4 <__sflush_r+0xf8>
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	e790      	b.n	8001016 <__sflush_r+0x1a>
 80010f4:	4407      	add	r7, r0
 80010f6:	1a36      	subs	r6, r6, r0
 80010f8:	e7ea      	b.n	80010d0 <__sflush_r+0xd4>
 80010fa:	bf00      	nop
 80010fc:	dfbffffe 	.word	0xdfbffffe

08001100 <_fflush_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	690b      	ldr	r3, [r1, #16]
 8001104:	4605      	mov	r5, r0
 8001106:	460c      	mov	r4, r1
 8001108:	b913      	cbnz	r3, 8001110 <_fflush_r+0x10>
 800110a:	2500      	movs	r5, #0
 800110c:	4628      	mov	r0, r5
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	b118      	cbz	r0, 800111a <_fflush_r+0x1a>
 8001112:	6a03      	ldr	r3, [r0, #32]
 8001114:	b90b      	cbnz	r3, 800111a <_fflush_r+0x1a>
 8001116:	f7ff fc95 	bl	8000a44 <__sinit>
 800111a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f3      	beq.n	800110a <_fflush_r+0xa>
 8001122:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001124:	07d0      	lsls	r0, r2, #31
 8001126:	d404      	bmi.n	8001132 <_fflush_r+0x32>
 8001128:	0599      	lsls	r1, r3, #22
 800112a:	d402      	bmi.n	8001132 <_fflush_r+0x32>
 800112c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800112e:	f7ff fe6c 	bl	8000e0a <__retarget_lock_acquire_recursive>
 8001132:	4628      	mov	r0, r5
 8001134:	4621      	mov	r1, r4
 8001136:	f7ff ff61 	bl	8000ffc <__sflush_r>
 800113a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800113c:	07da      	lsls	r2, r3, #31
 800113e:	4605      	mov	r5, r0
 8001140:	d4e4      	bmi.n	800110c <_fflush_r+0xc>
 8001142:	89a3      	ldrh	r3, [r4, #12]
 8001144:	059b      	lsls	r3, r3, #22
 8001146:	d4e1      	bmi.n	800110c <_fflush_r+0xc>
 8001148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800114a:	f7ff fe5f 	bl	8000e0c <__retarget_lock_release_recursive>
 800114e:	e7dd      	b.n	800110c <_fflush_r+0xc>

08001150 <__swhatbuf_r>:
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	460c      	mov	r4, r1
 8001154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001158:	2900      	cmp	r1, #0
 800115a:	b096      	sub	sp, #88	; 0x58
 800115c:	4615      	mov	r5, r2
 800115e:	461e      	mov	r6, r3
 8001160:	da0d      	bge.n	800117e <__swhatbuf_r+0x2e>
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001168:	f04f 0100 	mov.w	r1, #0
 800116c:	bf0c      	ite	eq
 800116e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001172:	2340      	movne	r3, #64	; 0x40
 8001174:	2000      	movs	r0, #0
 8001176:	6031      	str	r1, [r6, #0]
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	b016      	add	sp, #88	; 0x58
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	466a      	mov	r2, sp
 8001180:	f000 f848 	bl	8001214 <_fstat_r>
 8001184:	2800      	cmp	r0, #0
 8001186:	dbec      	blt.n	8001162 <__swhatbuf_r+0x12>
 8001188:	9901      	ldr	r1, [sp, #4]
 800118a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800118e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001192:	4259      	negs	r1, r3
 8001194:	4159      	adcs	r1, r3
 8001196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119a:	e7eb      	b.n	8001174 <__swhatbuf_r+0x24>

0800119c <__smakebuf_r>:
 800119c:	898b      	ldrh	r3, [r1, #12]
 800119e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011a0:	079d      	lsls	r5, r3, #30
 80011a2:	4606      	mov	r6, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	d507      	bpl.n	80011b8 <__smakebuf_r+0x1c>
 80011a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	6123      	str	r3, [r4, #16]
 80011b0:	2301      	movs	r3, #1
 80011b2:	6163      	str	r3, [r4, #20]
 80011b4:	b002      	add	sp, #8
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	ab01      	add	r3, sp, #4
 80011ba:	466a      	mov	r2, sp
 80011bc:	f7ff ffc8 	bl	8001150 <__swhatbuf_r>
 80011c0:	9900      	ldr	r1, [sp, #0]
 80011c2:	4605      	mov	r5, r0
 80011c4:	4630      	mov	r0, r6
 80011c6:	f7ff fe8d 	bl	8000ee4 <_malloc_r>
 80011ca:	b948      	cbnz	r0, 80011e0 <__smakebuf_r+0x44>
 80011cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d0:	059a      	lsls	r2, r3, #22
 80011d2:	d4ef      	bmi.n	80011b4 <__smakebuf_r+0x18>
 80011d4:	f023 0303 	bic.w	r3, r3, #3
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	81a3      	strh	r3, [r4, #12]
 80011de:	e7e3      	b.n	80011a8 <__smakebuf_r+0xc>
 80011e0:	89a3      	ldrh	r3, [r4, #12]
 80011e2:	6020      	str	r0, [r4, #0]
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	81a3      	strh	r3, [r4, #12]
 80011ea:	9b00      	ldr	r3, [sp, #0]
 80011ec:	6163      	str	r3, [r4, #20]
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	6120      	str	r0, [r4, #16]
 80011f2:	b15b      	cbz	r3, 800120c <__smakebuf_r+0x70>
 80011f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011f8:	4630      	mov	r0, r6
 80011fa:	f000 f81d 	bl	8001238 <_isatty_r>
 80011fe:	b128      	cbz	r0, 800120c <__smakebuf_r+0x70>
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	81a3      	strh	r3, [r4, #12]
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	431d      	orrs	r5, r3
 8001210:	81a5      	strh	r5, [r4, #12]
 8001212:	e7cf      	b.n	80011b4 <__smakebuf_r+0x18>

08001214 <_fstat_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d07      	ldr	r5, [pc, #28]	; (8001234 <_fstat_r+0x20>)
 8001218:	2300      	movs	r3, #0
 800121a:	4604      	mov	r4, r0
 800121c:	4608      	mov	r0, r1
 800121e:	4611      	mov	r1, r2
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	f7ff fafd 	bl	8000820 <_fstat>
 8001226:	1c43      	adds	r3, r0, #1
 8001228:	d102      	bne.n	8001230 <_fstat_r+0x1c>
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	b103      	cbz	r3, 8001230 <_fstat_r+0x1c>
 800122e:	6023      	str	r3, [r4, #0]
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	bf00      	nop
 8001234:	20000210 	.word	0x20000210

08001238 <_isatty_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d06      	ldr	r5, [pc, #24]	; (8001254 <_isatty_r+0x1c>)
 800123c:	2300      	movs	r3, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	602b      	str	r3, [r5, #0]
 8001244:	f7ff fafb 	bl	800083e <_isatty>
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	d102      	bne.n	8001252 <_isatty_r+0x1a>
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	b103      	cbz	r3, 8001252 <_isatty_r+0x1a>
 8001250:	6023      	str	r3, [r4, #0]
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	20000210 	.word	0x20000210

08001258 <_sbrk_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4d06      	ldr	r5, [pc, #24]	; (8001274 <_sbrk_r+0x1c>)
 800125c:	2300      	movs	r3, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	f7ff fb02 	bl	800086c <_sbrk>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	d102      	bne.n	8001272 <_sbrk_r+0x1a>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b103      	cbz	r3, 8001272 <_sbrk_r+0x1a>
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	20000210 	.word	0x20000210

08001278 <_init>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr

08001284 <_fini>:
 8001284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001286:	bf00      	nop
 8001288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128a:	bc08      	pop	{r3}
 800128c:	469e      	mov	lr, r3
 800128e:	4770      	bx	lr
